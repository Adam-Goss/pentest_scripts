# modules required
import sys
import os
import subprocess
import xml.etree.ElementTree
import pprint
import json
# classes required
from Port import Port


class ipTarget:
    '''
    a class for each ipTarget of a port scan which can:
    - run an nmap port scan on all ports
    - run an nmap version scan AND use specific port scanners against open ports found to give version info.
    - use searchsploit to find vulnerabilities based on version used
    - use the class method "findTargets" to perform an nmap ping sweep to find possible targets
    note: for all nmap scans output XML and then is parsed by script
    '''

    def __init__(self, ip):
        self.ip = ip
        self.ports = []
        self.os = ''
        self.hostname = ''
        self.state = ''

    def pingCheck(self):
        ''' run an nmap ping scan on the target to see if it responds to ping requests '''
        # create a xml file to parse for results
        scanfile = '/tmp/temp.xml'
        # create a subprocess and run nmap command
        pnScan = subprocess.call(
            'nmap -sn {} -oX {} > /dev/null'.format(self.ip, scanfile), shell=True)
        # parse temp xml file
        tree = xml.etree.ElementTree.parse(scanfile)
        # remove temporary xml file created (cleanup)
        os.remove('/tmp/temp.xml')
        # traverse through all host found
        for h in tree.findall('host'):
            # get the status of the IP address (up or down)
            for s in h.findall('status'):
                self.state = s.attrib['state']
            # get the hostname of the IP address (if there is one, else leave blank)
            for hns in h.findall('hostnames'):
                for hn in hns.findall('hostname'):
                    self.hostname = hn.attrib['name']
        # return True if the host is up and live (responding to pings)
        if self.state == 'up':
            return True
        else:
            return False

    def getPorts(self):
        ''' run an nmap TCP port scan on all ports for given ip address '''
        # create a xml file to parse for results
        scanfile = '/tmp/temp.xml'
        # create a subprocess and run nmap command
        pScan = subprocess.call(
            'nmap -T4 -p- {} -oX {} > /dev/null'.format(self.ip, scanfile), shell=True)
        # parse temp xml file
        tree = xml.etree.ElementTree.parse(scanfile)
        # create a list of port objects
        ports = []
        # remove temporary xml file created (cleanup)
        os.remove('/tmp/temp.xml')
        # traverse through all ports found
        for h in tree.findall('host'):
            for ps in h.findall('ports'):
                for p in ps.findall('port'):
                    # find port information to create Port object
                    portID = p.attrib['portid']
                    transportProtocol = p.attrib['protocol']
                    for st in p.findall('state'):
                        state = st.attrib['state']
                    for sv in p.findall('service'):
                        service = {'name': sv.attrib['name']}
                    # create a new Port object
                    port = Port(portID, transportProtocol, state, service)
                    # append Port to the list of ports found
                    ports.append(port)
        # update list of ports
        self.ports = ports

    def getVersions(self):
        ''' run a version (-sV) port scan on open ports list and an OS detection scan (-O) for given ip address and return dictionary '''
        # create a comma-separated list of ports self.ports
        joinPorts = [i.portid for i in self.ports]
        commaPorts = ','.join(joinPorts)
        # create a xml file to parse for results
        scanfile = '/tmp/temp.xml'
        # create a subprocess and connect to pipe, passing in ports list to aggressively scan
        vScan = subprocess.call(
            'nmap -T4 -sV -O -p{} {} -oX {} > /dev/null'.format(commaPorts, self.ip, scanfile), shell=True)
        # parse temp xml file
        tree = xml.etree.ElementTree.parse(scanfile)
        # remove temporary xml file created (cleanup)
        os.remove('/tmp/temp.xml')
        # traverse through all ports found
        for h in tree.findall('host'):
            # loop through os matches
            for o in h.findall('os'):
                for om in o.findall('osmatch'):
                    match = om.attrib['name']
                # update self.os with the OS found
                self.os = match
            # loop through ports to get version info
            for ps in h.findall('ports'):
                for p in ps.findall('port'):
                    # save the port number
                    portID = p.attrib['portid']
                    srv = {}
                    # collect dictionary of service information
                    for sv in p.findall('service'):
                        for a in ('name', 'product', 'version', 'extrainfo'):
                            if a in sv.attrib:
                                srv[a] = sv.attrib[a]
                    # update ports service attribute in self.ports list with new inf
                    for i in self.ports:
                        if i.portid == portID:
                            i.service = srv

        # TODO - do further version scanning on well-known ports
        # create dictionary or port numbers to metasploit module scanner commands
        versionScanners = {
            '21': 'ftp',
            '22': 'use auxiliary/scanner/ssh/ssh_version; set RHOSTS {}; run',
            '23': 'telnet',
            '25': 'smtp',
            '53': 'dns - udp',
            '69': 'tftp - udp',
            '80': 'http',
            '110': 'pop3',
            '119': 'nntp',
            '123': 'ntp',
            '143': 'imap',
            '139': 'use auxiliary/scanner/smb/smb_version; set RHOSTS {}; run',
            '161': 'snmp',
            '194': 'irc',
            '443': 'https and vmware',
            '445': 'smb',
            '1433': 'mssql',
            '3306': 'mysql',
            '5800': 'vnc',
            '5900': 'vnc'
        }

    def getVulns(self):
        ''' search for vulnerabilities using searchsploit given versions list '''
        # TODO - use version information to search searchsploit for vulnerabilities
        # create a list of searches to perform
        searches = []
        for i in self.ports:
            search = {'s_str': None, 's_result': None}
            srvs = ' '.join(i.service.values())
            search['s_str'] = srvs
            searches.append(search)

        pprint.pprint(searches)

    def findTargets(ipRange):
        ''' class method to identify possible targets on an IP range '''
        # create a xml file to parse for results
        scanfile = '/tmp/temp.xml'
        # create a subprocess and run nmap command
        fScan = subprocess.call(
            'nmap -sn {} -oX {} > /dev/null'.format(ipRange, scanfile), shell=True)
        # parse temp xml file
        tree = xml.etree.ElementTree.parse(scanfile)
        # create a list of hosts found on subnet
        addresses = []
        # remove temporary xml file created (cleanup)
        os.remove('/tmp/temp.xml')
        # traverse through all host found
        for h in tree.findall('host'):
            for a in h.findall('address'):
                addresses.append(a.attrib['addr'])

        hosts = {k: v for (k, v) in enumerate(addresses, 1)}

        if hosts:
            return hosts
        else:
            return False
