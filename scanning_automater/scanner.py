'''
port scanning automation tool used on the command line
1) run a port scan on all ports
input: ip address
output:
    a) list of open ports to scan further 
    b) list of filtered ports to scan further to use
2) run an nmap version scan against ports found to use
input:  list of open ports
output:
    a) print dictionary of results (i.e. port : [service, version, vulns])
    b) list of versions to use
3) use searchsploit to find vulnerabilities based on version used
input: list of versions 
output: print dictionary of possible vulnerabilities (i.e. version : [vuln1, ...])
'''
import sys, os, re, subprocess


def allPortScan(ip):
    ''' run an nmap TCP port scan on all ports for given ip address '''
    # create a subprocess and connect to pipe
    scan = subprocess.Popen('nmap -T4 -p- %s' % ip, stdout=subprocess.PIPE, shell=True)
    # append decoded lines to a list of correct lines to use from output of scan
    lines = []
    for line in scan.stdout:
        lines.append(line.decode()[:-1])

    #TODO: make text processing more accurate with re module rather than slicing

    # get rid of unwanted lines
    lines = lines[6:-2]
    # split lines into a list of port, state, service
    ports = []

    #TODO: create two lists - open ports and filtered ports (return filtered ports and aggressive scan open ports)
    
    for i in lines:
        x = i.split()
        y = x[0].split('/')[0]
        ports.append(y)
    # run aggressive scan on open ports found
    versionPortScan(ip, ports)



def versionPortScan(ip, ports):
    ''' run a version (-sV) port scan on open ports list for given ip address and return dictionary '''
    # create a comma-separated list of ports from passed in ports list by making a copy
    portsA = ports.copy()
    commaPorts = ','.join(portsA)
    # create a subprocess and connect to pipe, passing in ports list to aggressively scan
    scan = subprocess.Popen('nmap -T4 -sV -p%s %s' %
                            (commaPorts, ip), stdout=subprocess.PIPE, shell=True)
    # append decoded lines to a list of correct lines to use from output of scan
    lines = []
    for line in scan.stdout:
        lines.append(line.decode()[:-1])
    # get rid of unwanted lines
    lines = lines[6:-3]
    # split lines into a list services
    services = []
    for i in lines:
        a = i.split()
        b = ' '.join(a[2:])
        services.append(b)
    # create a dictionary of service versions running, i.e. service : version
    entries = zip(ports, services)
    versions = dict(entries)
    # run searchsploitLookup to print out possible vulnerabilities for each service version found
    searchsploitLookup(versions)


def searchsploitLookup(versions):
    ''' search for vulnerabilities using searchsploit given versions list '''



if __name__ == "__main__":
    '''
    if len(sys.argv) == 2:
        # if arg1 is present then check if IP address
        # TODO 
        print(sys.argv[1])
    
    else:
        # else print usage 
        usage = 'Usage: %s [ip_address]' % (sys.argv[0])
        print(usage)
    '''

    ip = '192.168.1.115'
    
    x = allPortScan(ip)
    # print(x)