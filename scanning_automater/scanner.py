'''
port scanning automation tool used on the command line
uses a Port class to keep track of port information
uses a Target class that can:
a) run a port on all ports
b) run an nmap version scan AND use specific port scanners against open ports found to give version info.
c) use searchsploit to find vulnerabilities based on version used
uses a findTargets function which performs a ping sweep to find possible targets on the network


when run as a script it uses a basic UI to perform following actions:
1) determine if single IP or IP range given on cmd line
2a) if IP range, find live hosts and report back hosts that can be scanned
2b) if single IP, check if IP is live
3) if valid IP (got by 2a or 2b) then give user option to perform scans against target (defined in Target class)
'''
# modules required
import sys
import os
# classes required
from ipTarget import ipTarget


if __name__ == "__main__":
    # separator value to use when printing output
    sep = '=' * 60

    ''' ****************************************************************** '''
    ''' **************************** functions *************************** '''
    # user actions that could be taken are broken into functions for ease-of-use - results can be collated here also
    def portScan(target):
        print('You selected "Port Scan" - initiating...')
        # perform port scan
        target.getPorts()
        # if target ports not empty
        if target.ports:
            # print ports list
            print(sep, '\n* Ports found:\n')
            for i in target.ports:
                print('\t', i.portid, i.service)
        else:
            print('No open ports found. Exiting...')
        print(sep)

    def versionScan(target):
        print('You selected "Version Scan" - initiating...')
        # check if the user has sudo permissions so they can run OS scan, by checking if their 'effective' uid is 0 (root)
        if os.geteuid() != 0:
            print("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exiting...")
            sys.exit(0)
        # execute getPorts and getVersions methods to return versions running on ports
        target.getPorts()
        target.getVersions()
        # print ports with services in use and OS found
        print('\n' + sep, '\n* OS found:\t' + target.os)
        print('\n* Versions found:\n')
        for i in target.ports:
            print(i.portid, i.service)
        print(sep + '\n')

    def vulnScan(target):
        print('You selected "Vulnerability Scan" - initiating...')
        # check if the user has sudo permissions so they can run OS scan, by checking if their 'effective' uid is 0 (root)
        if os.geteuid() != 0:
            print("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exiting...")
            sys.exit(0)
        target.getPorts()
        target.getVersions()
        target.getVulns()

    # interactive UI component
    def ip_interface(ip):
        # create ipTarget object
        t1 = ipTarget(ip)
        # check if IP address is live by doing pinging the target
        print('Performing ping check to see if the host is live...')
        test = t1.pingCheck()
        if test:
            # host is live
            # print the target hostname (if there is one)
            hostname = t1.hostname if t1.hostname else '[no hostname]'
            print('* Host is live with hostname: ', hostname)
            print('Select further action to take:')
            # get what scan a user wants to perform and loop until valid selection is made
            while True:
                selection = input(
                    '1 - Port Scan\n2 - Version Scan\n3 - Vulnerability Scan\n=> ')
                # call the correct function to run commands required based on input
                if selection == '1':
                    portScan(t1)
                    break
                elif selection == '2':
                    versionScan(t1)
                    break
                elif selection == '3':
                    vulnScan(t1)
                    break
                else:
                    print('Invalid selection - please try again')
        else:
            # else host is not live, so exit
            print(
                'Host is down - unable to perform further action at this time. Exiting...')
            sys.exit(0)

    ''' ****************************************************************** '''
    ''' ********************* main code for script *********************** '''
    # check if arg 1 is present
    if len(sys.argv) == 2:
        # check if arg is ip range or single ip (if it contains a / or - with numbers or a hostname - nmap specification)
        if '/' in sys.argv[1] or '-' in sys.argv[1]:
            # if ip range call ipTarget.findTargets with ip_range -> returns a dictionary of numbers and live IPs or False (if no hosts found)
            ip_range = sys.argv[1]
            print(
                '\nYou entered an address range - performing ping sweep to find targets...')
            targets = ipTarget.findTargets(ip_range)

            if targets:
                # get user to select a target from the dictionary
                while True:
                    print('* Targets found - please select one:\n')
                    for k, v in targets.items():
                        print('\t{} -> {}'.format(k, v))
                    s = input('=> ')
                    selection = int(s)
                    if selection in targets:
                        ip_target = targets[selection]
                        ip_interface(ip_target)
                        break
                    else:
                        print('\nInvalid selection. Please try again.')
            else:
                # not targets found
                print('No live hosts found on subnet. Exiting...')
                sys.exit(0)
        else:
            # else ip is a single IP address or hostname - call interface with single ip
            ip_interface(sys.argv[1])

    else:
        # else print usage
        usage = 'Usage: %s [ip_address | ip_range]' % (sys.argv[0])
        print(usage)
