import os
import sys
import socket
import re
import subprocess


class Host:
    def __init__(self, ip):
        self.ports = []
        self.versions = {}
        self.vulns = {}
        self.os = ''
        self.ip = ip
        self.mac = ''
        # try to get and set hostname
        try:
            hostname = socket.gethostbyaddr(ip)
            self.hostname = hostname[0]
        except socket.herror:
            # if no hostname then set None
            self.hostname = None

    def run_tcp_port_scan(self):
        '''
        scan ip address on all TCP ports and update list of (port, state, service), i.e. [(22, open, ssh), ...]
        '''
        # create a subprocess and connect to pipe
        scan = subprocess.Popen('nmap -T4 -p- %s' %
                                newHost.ip, stdout=subprocess.PIPE, shell=True)
        # append decoded lines to a list of correct lines to use from output of scan
        lines = []
        for line in scan.stdout:
            lines.append(line.decode()[:-1])
        # get rid of unwanted lines
        lines = lines[5:-2]
        # split lines into a list of port, state, service
        ports = []
        for i in lines:
            x = i.split()
            ports.append(tuple(x))
        # update list of ports
        self.ports = ports

    def udp_port_scan(self):
        # scan ip address on all TCP ports and update list of (port, transport, state, service)
        # i.e. [(53, transport, open, dns), ...]
        pass

    def find_versions(self):
        '''
        scan IP address on open ports and update list of versions of services running, i.e. [(22, open, ssh, OpenSSH 3.2b), ...]
        '''
        # create a comma separated string of ports to version scan
        ports = []
        for i in newHost.ports:
            ports.append(i[0].split('/')[0])
        ports = ','.join(ports)
        # create a subprocess and connect to pipe
        scan = subprocess.Popen('nmap -T4 -sV -p%s %s' %
                                (ports, newHost.ip), stdout=subprocess.PIPE, shell=True)
        # append decoded lines to a list of correct lines to use from output of scan
        lines = []
        for line in scan.stdout:
            lines.append(line.decode()[:-1])
        # get rid of unwanted lines
        lines = lines[5:-3]
        # split lines into a list services
        services = []
        for i in lines:
            a = i.split()
            b = ' '.join(a[2:])
            services.append(b)
        # create a dictionary of service versions running, i.e. service : version
        keys = [i[2] for i in self.ports]
        entries = zip(keys, services)
        self.versions = dict(entries)

    def find_vulns(self):
        # find vulnerabilities relating to versions running and update dictionary with list of vulns
        # i.e. {Apache httpd 2.2.14: [vuln1, vuln2, vuln3], OpenSSH 3.2b: [vuln1, vuln2], ...}
        pass

    def show_host_info(self):
        # return tuple of host info
        info = (self.ip, self.hostname, self.os)
        return info

    def show_ports(self):
        # return list of ports
        return self.ports

    def show_versions(self):
        # return dictionary of software versions running
        return self.versions

    def show_vulns(self):
        # return dictionary of vulnerabilities
        return self.vulns

    def __str__(self):
        # return all host information nicely formatted if printed
        host = '-' * 30
        host += '\n ip: %s\n hostname: %s\n os: %s\n ports: %s\n versions: %s\n vulns: %s\n' % (
            self.ip, self.hostname, self.os, self.ports, self.versions, self.vulns)
        host += '-' * 30
        return host

    def __repr__(self):
        # return all host information in dictionary
        host = {'ip': self.ip, 'hostname': self.hostname,
                'os': self.os, 'versions': self.versions, 'vulns': self.vulns}
        return host


if __name__ == "__main__":
    import pprint

    newHost = Host('192.168.1.115')

    # print(newHost.show_host_info())
    # print(newHost.show_ports())
    # print(newHost.show_versions())
    # print(newHost.show_vulns())

    newHost.run_tcp_port_scan()
    # pprint.pprint(newHost.show_ports())

    # print(newHost.ports)

    newHost.find_versions()

    # pprint.pprint(newHost.show_versions())

    print(newHost)
